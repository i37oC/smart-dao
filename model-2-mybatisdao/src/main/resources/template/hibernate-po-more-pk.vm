
import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EmbeddedId;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

@Entity
@Table(name = "${outputor.name}", uniqueConstraints = { @UniqueConstraint(columnNames = { "${outputor.pkColumnNames}" }) })
public class ${outputor.className} extends ${outputor.basePoName} implements Serializable {
	private static final long serialVersionUID = 1L;

	@EmbeddedId
	private ${outputor.className}PK pk;

	#foreach($column in $outputor.columnNotPKs)
		@Column(name = "${column.columnName}")
		private ${column.type} ${column.fieldName};

	#end

	public ${outputor.className}() {
	}

	/**
	*
	#foreach($column in $outputor.columnPKs)
	 *@param ${column.fieldName} -- ${column.comment}
	#end
	*/
	public ${outputor.className}($outputor.pkParams) {
		if (this.pk == null) {
			this.pk = new ${outputor.className}PK();
		}

		#foreach($column in $outputor.columnPKs)
			this.pk.set${column.fieldNameFirstCharUpcase}(${column.fieldName});
		#end
	}

	/**
	 *
	 *PK
	 */
	public ${outputor.className}PK getPk() {
		return this.pk;
	}

	/**
	 *
	 *PK
	 */
	public void setPk(${outputor.className}PK pk) {
		this.pk = pk;
	}

	#foreach($column in $outputor.columnNotPKs)

	/**
	 *
	 *$column.comment
	 */
	public $column.type get${column.fieldNameFirstCharUpcase}() {
		return $column.fieldName;
	}

	/**
	 *
	 *$column.comment
	 */
	public void set${column.fieldNameFirstCharUpcase}(${column.type} ${column.fieldName}) {
		this.${column.fieldName} = ${column.fieldName};
	}
	#end

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((pk == null) ? 0 : pk.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final ${outputor.className} other = (${outputor.className}) obj;
		if (pk == null) {
			if (other.pk != null)
				return false;
		} else if (!pk.equals(other.pk))
			return false;
		return true;
	}
}
